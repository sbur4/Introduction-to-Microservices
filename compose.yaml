services:
  resource-db:
    image: postgres:17-alpine
    container_name: resource-db
    environment:
      POSTGRES_DB: ${RESOURCE_POSTGRES_DB}
      POSTGRES_USER: ${RESOURCE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${RESOURCE_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql

  song-db:
    image: postgres:17-alpine
    container_name: song-db
    environment:
      POSTGRES_DB: ${SONG_POSTGRES_DB}
      POSTGRES_USER: ${SONG_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SONG_POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql

  resource-service:
    build:
      context: resource-service
      dockerfile: Dockerfile
    container_name: resource-service
    environment:
      RESOURCE_SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SONG_SERVICE_URL: "http://song-service:8081/songs"
      EUREKA_DEFAULT_ZONE: ${EUREKA_DEFAULT_ZONE}
    ports:
      - "8071:8080"
    depends_on:
      - resource-db

  song-service:
    build:
      context: song-service
      dockerfile: Dockerfile
#    container_name: song-service
    environment:
      SONG_SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      EUREKA_DEFAULT_ZONE: ${EUREKA_DEFAULT_ZONE}
    ports:
      - "8072-8073:8081"
    depends_on:
      - song-db
    deploy:
      replicas: 2

  eureka-serer:
    build:
      context: eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    environment:
      EUREKA_SERVER_PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: eureka-server
    ports:
      - "8761:8761"

  gateway-service:
    build:
      context: gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      BFF_SERVER_PORT: 8075
      EUREKA_DEFAULT_ZONE: ${EUREKA_DEFAULT_ZONE}
    ports:
      - "8075:8075"
